CMD --help 2>&1 | grep FILE

// this func will be ran first when exe is ran
--attribute__((constructor))
int func(){
    ...
}

stdin, stdout, and stderr are 0, 1, and 2


// linux permissions
// all users have a uid and gid
// all files are owned by a user and group
    // ls -l /bin/cat
    // -rwxr-xr-x 1 root root 43416 Sep 5 2019 /bin/cat
                    user group
    // - 
    // rwx(root user can do all this) 
    // -xr(root group can do this) 
    // -x (other global users)
// uid=0 is root, need to be root to make changes
// srwxsrwxsrwx ->
    // (SUID)(UserRead)(UserWrite)(UserExec)(SGID)(GroupRead)(GroupWrite)(GroupExec)(Sticky)(WorldRead)(WorkdWrite)(WorldExec)
    // SUID: execute with the eUID of the file owner, not the process 
    // SGID: execute with the eGID of the file owner, not the process 
    // Sticky: only allows users in a shared directory to remove this file if they made it
// eUID: used for access control checks
// UID/GID: real ID if the process owner
// saved: UID/GID that your process could switch its eID to
// root/UID:0 can open any file, execute any program, assume any other UID/GID, debug any program
// privlege escalation: expliot where attacker gains root privlege

// Mitigation
// Command Injection exploits hijack /bin/sh -p
// If /bin/sh is ran using SUID (eUID=0 + rUID!=0), it will drop the privleges to the rUID...
// using "sh -p" allows SUID to keep the eUID privlage escalation
// Wireshark: network traffic sniffer
// Sandboxing: wall off a program from anything sensitive

// program interaction
// command line = shell
// linux file system starts at / 'root' and there is a tree of directories under it
    // /usr -> all file systems
    // /usr/bin -> exe files for all programs on computer
    // /usr/lib -> shared libraries
    // /etc -> system configs
    // /var -> logs, caches
    // /home -> user data
    // /proc -> runtime process data
    // /tmp -> temporary data
// directories -> hold files
// pwd -> print working directory
    // absolute paths -> start with '/' or from root
    // relative paths -> relative to the cwd
    // './' -> signifys current directory
    // '../' -> signifies the directory above the cwd
// enviornment variables -> key:value pair for a program when it is launched
    // output enviornment vars using 'env' command
    // PATH: list of dirs to search for program in
    // PWD: the cwd
    // HOME: path to home dir
    // HOSTNAME: name of the system "user@system $" in shell
// file types -> see using 'ls -ld'
    // - : regular file
    // d : directory
    // l : symbolic link
    // p : named-pipe/fifo
    // c : char device file
    // b : block device file
    // s : unix socket
// symbolic links -> 'ln -s' to make owned
    // references to another file/dir on the system
    // links to relative paths are still relative paths!    
    // hard links: identical copy of the file you are referencing
// Pipes -> output of first program is the input to the second program
    // fifos: named pipes, first data to come in is the first out
// I/O redirection 
    // < infile
    // > outfile -> overwrite
    // >> outfile -> append
    // 2>errfile -> overwrite
    // 2>>errfile -> append


// ----Fundamentals----
// ELF file: executable and linkable format
    // binary file format
    // contains the data for the program
    // describe how program should be loaded
    // contains metadata describing program components

    // ELF program headers: define segments of the loaded memory 
        // INTERP: defines the library that should be used to load the elf into memory
        // LOAD: defines the part of the file that should be loaded into memory
        // headers are the source of info used when loading a file

    // ELF section headers: has semantic information, less important for loading
        // .text: executable code of program
        // .plt/.got: resolves dispatcch lobrary calls
        // .data: pre-initialized global writable data
        // .rodata: global read-only data
        // .bss: uninitialized global writable data
        // section headers are optional, technically metadata
    
    // Symbols -> names used to find the dynamically loaded libraries
        // resolves function calls to these linked libraries
    
    // Interaction
        // gcc -> make elf
        // readelf -> parse elf header
        // objdump -> parse elf header + disassemble source code
        // nm -> view elf Symbols
        // patchelf -> change some elf properties
        // objcopy -> swap out elf sections
        // strip -> remove information such as Symbols
        // kiatai struct -> look thru elf interactively

// Linux process
    // Process has a state, priority, parent/sibling/children, shared resources, virtual memory space, security context
    // Processes are like mitosis
    // fork() and clone() copy a current process
        // new process knows it is the child
        // using execve() the child can replace itself
    // Kernel loading
        // kernel knows what to load based on the start of the file
            // 1. #! means the file is a script and extracts the interpreter from this line (eg: python)
            // 2. if file matches format in /proc/sys/fs/binfmt_misc and matches to an interpreter in that file
            // 3. file is a dynamically linked (has libraries) elf, kernel reads loader/interpreter defined in the elf + lets it take control
            // 4. file is staticlly linked elf, kernel will load it
    // ELF loading process
        // 1. program + interpreter are loaded to kernel
        // 2. interpreter locates libraries
            // env vars: LD_PRELOAD, LD_LIBRARY_PATH, DT_RUNPATH/DT_RPATH
            // /etc/ld.so.preload, /etc/ld.so.conf(system wide config), /lib and /usr/lib
        // 3. interpreter loads libraries
            // these libs my depend on other libs
            // relocations updated

    // Where does the elf get loaded to?
        // linux processes have a virtual memory space
            // contains: binary, libs, heap (dynamic mem), stack (for function local vars), mem specifically mapped by the program, helper regions, kernel code in the 'upper half' of the code (inaccessible to the process)
            // virtual mem is dedicated to your process
            // pysical mem is shared among the whole system
            // /proc/self/maps -> see an entire process's memory space

    // Std C library also calle libc.so
        // printf, scanf, socket, atoi, malloc, free ...

    // staticlly linked libs -> one step: the binary is loaded
    
    // Elf initialization
        // every elf can set a constructor -> ran before the program is launched
        // __attribute__((constructor)) void haha(){write(1, "hello world\n", 6);}

    //Program Execution
        // ELF automatically calls __libc_start_main() in libc -> this is main() and the code is now running
        // at launch the program only has access to -> loaded libraries, arguments in argv, and env vars in envp

    // Library functions
        // binary IMPORT symbols are resolved using the libraries EXPORT symbols

    // Interacting during Execution
        // Syscalls -> program can use these to interact with the outside 
        // strace -> used to trace system calls for a process

        // Signals -> OS uses these to interact with the program
        // kill() -> send a signal to a process
        // signals pause process and invoke a handler
        // handlers are functions that take the signal number
        // without a handler a default action is taken (kill)
        // SIGKILL(9) & SIGSTOP (19) cannot be handled

        // Shared Memory -> can be established Syscalls
            // Syscalls -> clone(), NOT fork()
            // /dev/shm -> folder in linux for shared memory

    // Termination
        // can happen in 2 ways
            // 1. recieve unhandled signal
            // 2. calling exit() Syscalls
        // after Termination
            // process remains in a zombie state until the parent process wait()s for it
            // after wait() they will be freed, return value goes to the parent
            // if the parent dies before wait() is called, they will reparent to PID 1

// Computer Architecture
    // Logic Gates: fundumental building blocks of a CPU/Memory
    // CPU: all programs eventually get executed on a CPU
        // Registers: very small memory units
        // CU: decides what to execute
        // ALU: where computations happen
        // Cache: fast storage that stores items read form the memory
        // Multi core CPUs: each core had the above and there is another shared cache

// Assembly code
    // only programming language that interacts with the CPU
    // Registers: fast/temporary/expensive stores of data
    // x86: 32bit
        // general purpose: eax, ecx, edx, ebx, esi, edi
        // stack pointer: esp 
        // base pointer: ebp
        // addr of next instr: eip
    // amd64: 64bit
        // general purpose: rax, rcx, rdx, rbx, rsi, rdi, r8, r9, r10, r12, r13, r14, r15
        // stack pointer: rsp
        // base pointer: rpb
        // addr of next instr: rip
    // Partial access:
        // *l: lower 16 bits
        // [a-d]h: higher 16 bits
        // ax: first 16 bits 
        // eax: first 32 bits 
        // rax: all 64 bits
        // 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
        // 0 1 2 3 4 5 6 7 8 9 a  b  c  d  e  f  
        // MSB                                     LSB
        // +----------------------------------------+
        // |                   rax                  |
        // +--------------------+-------------------+
        //                      |        eax        |
        //                      +---------+---------+
        //                                |   ax    |
        //                                +----+----+
        //                                | ah | al |
        //                                +----+----+
        // * Quad Word = 8 Bytes = 64 bits
        // * Double Word = 4 bytes = 32 bits
        // * Word = 2 bytes = 16 bits
        // * Byte = 1 byte = 8 bits

    // Instructions: tell the CPU what to do
        // OPCODE OPERAND, OPERAND 
        // OPCODE: what to do
        // OPERANDS: what to do on/with
        // Data manipulation
            // mov rax, rbx -> rax=rbx 
            // mov rax, [rbx+4] -> mem_loc(rbx) + 4
            // add rax, rbx -> rax += rbx
            // inc rax or [rax] -> increment rax or mem of rax
        // Control flow
            // je/jne, jg/jl, jle/jge, ja/jb, jae/jbe, js/jns, jo/jno, jz/jnz
        // Syscalls
            // rdi: value of the syscall number to run
            // rsi: 
            // call syscall instruction with no operands
        // stack
            // tracks the call stack -> functions that are being ran
            // stores local variables
            // provides scratch space to alleviate the Registers
            // used to pass function arguments 
            // rsp, rbp: relevant registers 
            // push/pop: relevant instructions 
        
        // Endianess
            // Litte Endianess: most systems, is stored backwards
            // 0x100 0x101 0x102 0x103 
            //  67    45    23    01  <- storing 01234567 

        // Two's compliment: storing if value is pos/neg
            // (unsigned)b11111111+1 == 255+1 == 0 == b00000000
            // (signed)b11111111+1 == -1+1 == 0 == b00000000

        // Calling Convenstions 
            // caller/ callee function agreements on parameter passing
            // amd64
                // arguments: rdi, rsi, rdx, rcx, r8, r9
                // return value: rax
                // callee saved: rbx, rbp, r12, r13, r14, r15

// ----Shellcoding----
// Introducation
    // Von Neumann architechture: sees and stores code as data

    // Shell coding
    // goal is to achieve arbitrary command Execution
    // attack goal is to launch a shell 
        // execve('/bin/sh', 0, 0)
        // -----------------------
        // mov rax, 59
        // lea rdi, [rip+binsh]
        // mov rsi, 0
        // mov rdx, 0
        // syscall 
        // binsh:
        // .string "/bin/sh" <- add this data into your shell code

    // Adding data
        // .string "some string" -> "some string\0"
        // .byte 0x??, 0x?? ...
        // also
        // mov rbx, 0x006748327b # move '/bin/sh\0' into rbx
        // push rbx              # push '/bin/sh\0' onto the stack
        // mov rdi, rsp          # point rdi at the stack

        // Non-shell shellcode: sendfile(1, open("/flag", NULL), 0, 1000)
        // mov rbx, addr of /flag 
        // push rbx 
        // mov rax, 2 -> syscall 2 open() 
        // mov rdi, rsp
        // mov rsi, 0
        // syscall -> call open()

        // mov rdi, 1
        // mov rsi, rax -> rax is return value of open() 
        // mov rdx, 0
        // mov r10, 1000
        // mov rax, 40 -> sendfile() is syscall 40
        // syscall -> call sendfile()

        // mov rax, 60 -> exit() is sysclal 60
        // syscall -> call exit()

    // Building shellcode
        // 1. write shellcode in Assembly
        // 2. assemble the code
        // 3. extract shell code in bytes from .text
        // 4. these bytes is what you will inject

    // Running shellcode in exotic conditions
        // page = mmap(0x1337000, 0x1000, PORT_READ|PORT_WRITE|PORT_EXEC, MAP_PRIVATE|MAP_ANON, 0, 0);
        // read(0, page, 0x1000);
        // ((void(*)())page)();
        // then 'cat shellcode | ./tester'

    // Debug shellcode 
        // highlevel: strace
        // lowlevel: gdb
            // print next 5 instructions: x/5i $rip 
            // examine qwords(x/gx $rsp), dwords(x/2dx $rsp), halfwords(x/4hx, $rsp), bytes(x/8b $rsp)
            // to step one instr (follow call instr): si 
            // to step one instr (step over call instr): ni
            // to break at an addr: break *0xaddr
            // run, continue, and reverse exection work as expected
            // hardcode breakpoints in your code using int3 instruction -> best to use at the beginning of the shellcode

// Common Challenges 
    // Forbidden Bytes
        // Bytes (Hex Value)         | Problematic methods
        // Null byte \0 (0x00)       | strcpy
        // Newline \n (0x0a)         | scanf, gets, getline, fgets
        // carriage return \r (0x0d) | scanf
        // space (0x20)              | scanf
        // tab \t (0x09)             | scanf 
        // DEL (0x7f)                | protocol-specific (telnet, VT100, etc)
       
        // Bad                   | Good
        // mov rax, 0            | xor rax, rax
        // mov rax, 5            | xor rax, rax; mov al, 5
        // mov rax, 10           | mov rax, 9; inc rax 
        // mov rbx, 0x67616c662f | mov ebx, 0x67616c66; shl rbx, 8; mov bl, 0x2f
        //          ("flag")^^^^

        // Bypassing restriction on int3 
            // inc byte ptr [rip] <- increments next instruction
            // .byte 0xcb
            // testing: gcc -Wl, -N --static -nostdlib -o test test.s

    // Multi Stage shellcode 
        // Stage 1: read(0, rip, 1000)
            // get currect instruction pointer -> lea rax, [rip]
        // Stage 2: whatever you want! -> stage 1 reads in this shell code

    // Shellcode Mangling 
        // Examples: shellcode can be: 
            // sorted
            // compressed or uncompressed
            // encrypted or decrypted
        // Tips: construct the shellcode backwards
            // write shellcode so it will end how you want it

    // Communication: 
        // Normal shellcode gives you a shell (or the flag)
        // if there is no output (e.g. close(1) or close(2))
        // one bit of data is enough to communicate

// Data Execution Prevention
// Shellcode MItigation    
    // PROT_READ: allows process to read memory
    // PROT_WRITE: allows process to write memory
    // PROT_EXEC: allows process to execute memory 
    // in modern systems the STACK and HEAP are not executable
    // PROBLEM: your shellcode needs to execute

// End of shellcoding ?
    // Still very prevalant in embedded systems
    // use the mprotect() system call to make memory executable
    // can also jump to the shellcode 
    // JIT: Just in time compilers 
        // generating binary code that is able to be ran
        // JIT spraying: place constants in code to use mprotect()

// ----Sandboxing----
// chroot 
    // chroot changes the meaning of / 'root'
    // sets root to be set to chroot('/tmp/jail') <= not jail
        // chroot /tmp/jail /bin/bash <= won't work bc /bin/bash doesn't exist anymore
        // /tmp/jail/busybox -> runs the commands you would like while in jail
    // effects
        // changes the meaning of '/' to '/tmp/jail'
            // /flag becomes /tmp/jail/flag
        // what it doesn't do
            // close the resources outside of jail 
            // cd into the jail 
    // Use cases:
        // you can run openat() or execveat() to get the flag since the old resources are still available
        // use syscalls that have the *at() variant to do whatever you want

// seccomp 
    // seccomp is a syscall firewall for linux
    // allows developers to
        // allow certain syscalls 
        // disallow certain syscalls 
        // filter allowed and disallowed syscalls based on argument vars 
    // Build a sandbox using seccomp -> gcc file.c -lseccomp
        // scmp_filter_ctx ctx;
        // ctx = seccomp_init(SCMP_ACT_ALLOW); -> init seccomp, allows all syscalls
        // seccomp_rule_add(ctx, SCMP_ACT_KILL, SCMP_SYS(execve), 0); kill the syscall 'execve'
        // seccomp_load(ctx); -> applies filter
        // execl("/bin/cat", "cat", "/flag", 0);
    // How does it work?
        // eBPF: extended Berkely Packet Filters
            // programs that run in the kernel
            // provable safe VM

// Escaping seccomp 
    // Permissive Policies
        // ptrace() -> linux debugging functionality, allows for you to change anything in the system
        // sendmsg() -> transfer fds between proceses 
        // prctl() -> lots of stuff
        // process_vm_write() -> allows direct access to a process memory
    // Sycall confusion 
        // syscall number differ for different architechtures (64bit, 32bit)
        // if seccomp only applies to 64bit then you can just use the syscall in 32 bit mode
    // Kernel Vulnerabilities
        //  if the kernel is vulnerable then the process can exploit these Vulnerabilities
    // Goal is to get the flag 
        // can get data about the flag using sleep() syscall 
        // return value can be conveyed using exit() 
        // getting one bit at a time is all you need 

// ----Reverse Engineering----
// Introduction 
    // Forward engineering -> design code, code it, compile it, run it 
    // Forward engineering tools -> IDEs, gcc, strings, strip 
    // Reverse engineering 
        // starting from the executable and convert it to source code 
        // disassemble -> decompile -> lots of thinking -> understand

// Functions and Frames
    // programs -> consist of modules, functions, variables, blocks, instructions
    // Modules: libraries of commonly used code segments 
        // Library code does not need to be reversed 
    // Functions: well defined goal 
        // reverse engineer these in isolation then understand how they fit together after 
        // CFGs -> function graphs, can be used to understand the functions functionality 

        // Stack -> memory region 
            // local variables are stored on the stack 
            // the stack grows backwards
            // push = subtract 8 from rsp, pop add 8 to rsp 
            // consider push 0x41; push 0x42; push 0x43
            // _________ 0x00
            // | stack |  ^
            // |       |  |
            // |       |  |
            // |  0x43 |  |
            // |  0x42 |  |
            // |  0x41 |  |
            // _________ 0xFF

            // Initial layout: stack starts out with env vars and program arguments 
            // Calling a function:
                // if function foo() is called, the instruction after foo() is pushed to the stack 
                // when returning, this instruction is popped back off of the stack so the program can return there 
                // call/ret instructions automatically do this  
            // Local Variables: 
                // rsp (points to the top of the stack)
                // rbp (points to the bottom of the stack)
                // function frame setup: save caller's rbp, set rbp = rsp, allocate space on stack (subtract from rsp)
                // function frame teardown: deallocate stack (set rsp = rbp), restore old rbp 

// Data Access 
    // data can be in 
        // .data: pre-initialized global data 
        // .rodata: global read only data 
        // .bss: uninitialized global writable data 
        // stack: statically allocated local vars 
        // heap: dynamically allocated variables 
    // Stack data 
        // accessing:
            // 1. push or pop 
            // 2. rsp/rbp relative accesses 
            // 3. via reference, mov rdx, rsp; mov [rdx], 0x41;
    // Data in elf sections: .bss, .rodata, .data 
        // Load: mov rax, [rip+0x20040]
        // Store: mov [rip+0x20040], rax 
        // Reference: lea rax, [rip+0x20040]
    // Heap Data: pointers stored in mem or on the stack  
        // mov rax, [rsp]; mov rdx, [rax]
        // the above gets a pointer off the stack then dereferences the data the pointer points to 
    // Data structures: type information is lost in the compilation process 

// Static tools: tools to analyze a program when not running 
    // simple tools: nm, strings, objdump, checksec 
    // advanced tools: ida, binary ninja, angr managment, ghidra, cutter 

// Dynamic tools: analyze a program at runtime  
    // ltrace and strace: traces library or system calls
    // gdb and gdb scripting 

    // GDB: dealing with PIE (position independent exes)
        // Position dependent exes: loaded at a static addr 
        // Position independent exes: not loaded statically 
        // GDB always loads them in at 0x0000555555554000 
        // in .gdbinit -> set $base = 0x0000555555554000
        // break *($base+0x1023) -> check using 'info proc map' to find correct base 
        // 'record' instr in gdb records and allows you to replay instructions 

//----Memory Errors----
// Introduction - tldr...C/C++ have a lot of Vulnerabilities
// High-level problems: 
    // Buffer Overflow
        // int a[3] = {1,2,3}; a[10] = 10; // no problem
    // Mixing data and metadata
        // char name[10] = "Yan";
        // name = Y a n \0 \0 \0 \0 \0 \0 \0   
        // read(0, name, sizeof(name));
            // NULL bytes in input?
                // Y\0n_shoshi
            // no NULL bytes in input?
                // Yan_shoshi     
    // initialization and cleanup 
        // after the program terminates, the memory is left untouched unless you tell it to
        // char my_variable[10]; -> initial value will be what happened to be in the stack before running the program 

// Smashing the stack - stack overflow
    // int main(int argc, char **argv, char **envp){
    //     print_quoted(argv[1]);
    //     return 0;
    // }
    // void print_quoted(char* s){
    //     printf(quote(s));
    //     return 0;
    // }
    // char * quote(char *s){
    //     char output[16];
    //     sprintf(output, "\"%s\"", s);
    //     return output;
    // }
    // Problem? sprintf() function
        // if attacker enters a large input it will overflow the buffer
        // bad functions: gets, strcpy, scanf, sprintf
        // sprintf() does not know how long the input should be: should use snprintf() 
    // What can be corrupted?
        // value in mem: used in operations, jumps, etc
        // read pointer: force program to access arbitrary memory 
        // write pointer: force program to overwrite arbitrary memory 
        // code pointer: allow us to redirect execution 
    // Return pointer overwrites: 
        // overwritting the return adress of a function during program execution to control what is executed next

// Causes of Corruption
    // Classic buffer overflow
        // look for buffer with small size and it is read in using a larger amount allowed 
    // Signedness mixups
        // to stop a buffer overflow you first get the size of the string from the user
        // if you use a signed int to read the size this is a problem 
        // if(size > 16) exit(1); -> -1 > 16 -> is false but -1 in 2's compliment is 0xfffffff 
        // cannot enter -1 in gdb...
            // break read 
                // commands 
                    // set $rdx = $rdx & 0xfff
                    // c 
                //end  
    // Integer overflow 
        // even if someone used an unsigned int there can still be a problem 
        // you can still enter -1 if someone used an unsigned int if they are adding a NULL terminator to the string 
// Stack Canaries 
    // Canaries: miners brought canaries into mines to detect poisnous gases 
    // In cyber security: they detect stack overflows before they begin 
    // ***stack smashing detected: Terminating program    
    // they are very effective 
        // 1. leak the canary (use another vulnerbility)
        // 2. brute force the canary 
        // 3. jump the canary 
// ASLR
    // randomizes the layout of the address space
    // attacker cannot find pointers in the code easily

    // Workarounds:
        // 1. leak memory adressed using another vulnerablility 
        // 2. just overwrite the page offest since the program asset pages are aligned, requires some brute forcing 
        // 3. brute force the memory
    // Overwriting page offsets 
        // pages are always aligned to a 0x1000 alignment 
        // thus, the last 3 nibbles of an address are never changed
        // disable aslr: pwn.process("./vulnerable_program", aslr=False)
// Memory Disclosures   
    // Buffer Overreads: analogouse to buffer overflow 
        // when you write too much to stdout 
        // can use this to read stack canaries or aslr addresses 
    // Termination Problems 
        // can buffer overflow if there is no null bytes 
    // uninitialized data 
        // when you return from a function all your data is left behind 

// ----Race Conditions----
// Introducation 
    // Process arrow of time
        // initialize() -> check_input() -> do_action() -> check_input() -> do_action() -> check_input() -> do_action() -> terminate()
        // multipe processes can run at once, these processes can run together and execute in any order
        // time of check/time of use bug: process enviroment can change during the execution of a program 
        // Can be exploited by injecting attack during enviornmental weak spot 
// Races in the filesystem 
    // exploit a race condition by changing the state of a program while it thinks it is still in the same state 

    // anything can happen between open() and /bin/sh execl()
    // create a symlink in while(1) loop to catflag file to exploit
    // int main(int argc, char ** argv){
    //    int fd = open(argv[1], O_WRONLY | O_CREAT | O_TRUNC, 0755);
    //    write(fd, "!#/bin/sh\necho SAFE\n", 20);
    //    close(fd);
    //    execl("/bin/sh", "/bin/sh", argv[1], NULL);
    // }

    // Example 2: doing same exploit allows you to win much less
    // int main(int argc, char ** argv){
    //    int echo_fd = open("/bin/sh", O_RDONLY);
    //    int fd = open(argv[1], O_WRONLY | O_CREAT, 0755);
    //    sendfile(fd, echo_fd, 0, 1024*1024);
    //    close(fd);
    //    execl(argv[1], argv[1], "SAFE", NULL);
    // }

    // Opening vulnerability window 
        // 1. nice: use this to make a program pause more often
        // 2. path complexity: cat /flag vs. cat /a/b/c/d/e/flag
            // use a file system maze too using symlinks

// Processes and Threads
    // operating system runs many processes at once 
    // each process can have multiple threads 
        // threads share: virtual mem, fds 
        // have own: regs, stack, thread id, uid, gid, seccomp rules 
    // Creating threads 
        // pthread: used in C to create threads 
        // clone() syscall: successor to fork() sycacall 
    // Discrepancies: 
        // setuid: libc wrapper sets uid of all threads, syscall only sets uid of the caller thread
        // exit: libc wrapper will call exit_group(), syscall only terminates the caller thread 
    // Thread Termination
        // global variables are used with threads
        // causes the same exploit to occur as the filesystem exploit 

// Races in Memory 
    // with threads, memory is a shared resource 
    // global data can be changed after it is checked but before it is used 
    // prevent data races 
        // mutex: lock in the code where only one thread can run a portion of code at a time  
        // pthread_mutex_t lock; 
    // detect data races: hard to do 
        // valgrind: helgrind and drd detect data races  

// Signals and Reentrancy
    // kill(pid_t pid, int sig);
    // kill -l -> view all the signals 
    // signal handlers 
        // handlers run different defualt code for a signal
        // can't do this for sig kill and sig int
        // exploit: you can cause a program to divert execution when it gets a signal 
        // what if signal is handled during critical section? 
    // Reentrancy
        // functions that would operate properly even ehwn interrupted with an instance of themselves 


// ---- Kernel Security ----
// Introducation   
    // Rings: ring 0 (kernel space), ring 3 (user space)
    // hlt: shuts cpu computation
    // in + out instr: interact with hardware
    // regs:   
        // cr3: controls the page table to translate virtual to physical address
        // MSR_LSTAR: defines where the syscall instruction jumps to 
    // switch rings:
        // in x86   
            // 1. kernel boots in ring 0
                // sets MSR_LSTAR to point to a routine
            // 2. user can call syscall to interact with the kernel
                // saves the syscall return value to rcx
            // 3. kernel calls sysret after syscall is done 
    // Kernel-User Relationship
        // userspace has virtual mem at low addresses 
        // kernel has virtual mem at high addresses - only accessible in ring 0
// Env setup
    // need compiler, kernel, userspace filesystem, emulator
    // debugging  
        // if kernel is configed with debug symbols and ASLR is off
        // gdb vmlinux -> ni is broken use si/finish
        // launch gdb   
            // gdb linux-5.4/vmlinux
            // target remote (port num of kernel quemu)
    // /proc/kallsyms -> prints out all kernel symbols if root 
// Kernel Modules 
    // modules are basically kernel libraries 
    // Module interactions 
        // system calls -> syscall handlers (not in modern kernels)
        // interupts -> int3, int1 both can be hooked 
        // files -> /dev (devices), /proc (process info), /sys (nonprocess info)
            // use open() syscall to open these files
            // ioctl() -> syscall that provides a flexible interface 
                // kernel space : register handler
                // user space : open() then ioctl()
    // Driver interaction   
        // in kernel 
            // read from userspace, do stuff with info, writes data back to userspace, return to userspace 
    // Compile modules 
        // write module -> src/module.c 
        // add entry in src/Makefile 
        // ./build.sh
    // Module loading -> init_module syscall 
        // add module -> insmod 
        // list modules -> lsmod
        // remove module -> rmmod 
// Privilege escalation 
    // Kernel memory corruption     
        // copy_from_user and copy_to_user 
    // goal: overwrite cred->uid with 0 to become root 
    // prepare_kernel_cred(NULL) -> gives root access since NULL==0 
    // run  
        // commit_cred(prepare_kernel_cred(0));
// Excaping seccomp 
    // task_struct->thread_info.flags &= ~(1 << TIF_SECCOMP)
        // disables/enables seccomp 
        // can access this struct with the gs register 
// Memroy Management    
    // process memory   
        // binary, libraries, heap/stack, etc. 
        // physical memory in RAM inside computer 
    // Virtual memory 
        // each process has a virtual address in memory 
        // continuous virtual addresses are not continous in physical mem
        // all of the non-continuous memory must be tracked 
        // all these page address values are stored in the page table 
            // each stores 512 entries, each page has 0x1000 of memory
        // Page directoies: 512 entries, holds the addresses of the page tables which hold the page addresses 
        // PDPT: page directory page table, each entry has its own page directory
        // Page Map Level 4: page directory of 512 PDPTs -> allows 256TB of RAM 
    // Virtual address 
        // 0x7fff47d4c123 in binary    
            // first 9 bits (index into page map)
            // next 9 index to PDPT 
            // next 9 bits index to PD 
            // next 9 bits index into PT 
            // last 12 bits index to page
    // Process isolation 
        // cr3 register: holds the physcial mem location of PML4 
        // only accessible in ring 0 
    // Virtual machine isolation
        // each virtual machine has its own extended PML4 
    // Hardware support for lookups
        // all this is super fast with the memory management unit 
    // Kernel and memory 
        // phys_to_virt() -> physical to virtual mem 
        // virt_to_phys() -> virtual to physical mem
// Kernel Mitigations 
    // stack canaries 
    // kASLR
    // heap/stack are not executable by default 
    // SMEP/SMAP: prevents kernel executing userspace code 
        // SMEP: executing userspace mem 
        // SMAP: accessing userspace mem 
// Kernelspace shellcode 
    // syscalls in kernel space shellcode will crash 
    // solutions?
        // privlege elevation
            // commit_creds(prepare_kernel_cred(0))
        // seccomp escape
            // current_task_struct->thread_info.flags &= ~(1 << TIF_SECCOMP)
        // command execution
            // run_cmd("/path/to/my/command");
    // must call funtions to do this
        // kALSR off?
            // use /proc/kallsyms 
        // kASLR on?
            // leak kernel address and calc offset 
    // exit cleanly -> or you will crash!
        // make sure to clean stack and return!

// ----Exploitation Scenarios----
// Introduction
    // 1. enternal reconnaissance
    // 2. gain a foothold
    // 3. internal reconnaissance 
    // 4. repeat 
// Hijacking to Shellcode 
    // gets() -> allows for buffer overflow 
// Side Effects
    // Hijacking control flow is not the only exploit you can do 
    // overwrite if() checks with null bytes 
// JIT Spray 
    // Just in time compilation: 
        // 1. write code, JS/Python/Java 
        // 2. code is compiled at runtime 
        // 3. binary code executes very fast 
        
        

            
    


    
    
    

    


    
        


